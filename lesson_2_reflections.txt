1. ------------
Question: What happens when you initialize a repository? 
Why do you need to do it?

Als je een repository initialiseert wordt er een verborgen directory aangemaakt 
indie repository, genaamd '.git'. In deze directory wordt metadata bewaard 
m.b.t. de historiek van repository.

Deze folder wordt onzichtbaar gemaakt, omdat de user er niet rechtsreeks mee 
moet interageren. Het onzichtbaar maken doet het OS door een '.' te plaatsen 
voor de directorynaam.

2. ------------
Question: How is the staging area different from the working directory and the
repository? What value do you think it offers?

In de staging area staan de bestanden die in je volgende commit gaan zitten.
Het gaat hier over modified files, die nog niet behoren tot de repository.
Wanneer ze committed zijn, behoren ze tot de repository.

Een voordeel dat de staging area biedt, is dat je kan selecteren welke files
zullen behoren tot de volgende commit. Op die manier worden niet telkens alle
files gecommit.

3. ------------
Question: How can you use the staging area to make sure you have one commit
per logical change?

Door enkel de files te stagen die wijzigingen hebben ondergaan m.b.t. één
logical change kan je ervoor zorgen dat je commits ook een enkele logical
change bevatten.

4. ------------
Question: What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

Branches zijn handig wanneer je aan een experimentele feature wil werken,
die risicovol is en waarvan je niet zeker bent dat het programma nog gaat
werken. Wanneer de feature uiteindelijk werkt, kan je de verschillende branches
samenvoegen (ook wel mergen genoemd).

Een andere toepassing is wanneer je een versie in een andere taal wil maken.

Het geeft je ook de mogelijkheid om even te werken aan een andere feature in
de software, als je al heel lang een eenzelfde feature werkt. Op die manier
laten branches je toe om van context te veranderen.

5. ------------
Question: How do the diagrams help you visualize the branch structure?

De diagram geeft een overzicht van de overerving van commits, m.a.w. van
welke commit een bepaalde commit afkomstig is.

Je ziet ook duidelijk waar nieuwe branches afgetakt zijn.

6. ------------
Question: What is the result of merging two branches together? Why do we
represent it in the diagram the way we do?

Het resultaat van het mergen van twee branches, is dat we opnieuw een branch
hebben. De merge creëert een nieuwe commit, die twee parents heeft, nl. 
een commit uit de twee parent branches.

In de diagram zie je duidelijk de overerving van de merge commit.

7. ------------
Question: What are the pros and cons of Git's automatic merging vs. always
doing merges manually?

Automatic merging:
Pro: Git slaagt er redelijk goed in om verschillende branches samen te voegen.
Het is dus een groot voordeel om dit niet manueel te moeten doen.

Con: Bij conflicten gaat Git twee branches samenvoegen, maar is de kans groot
dat de code niet zal runnen. Git geeft echter goede aanwijzingen over waar de 
problemen zitten.

Manual merging:
Pro: Bij conflicts is de programmeur intelligenter dan Git, om te bepalen wat
in de finale file-versie moet zitten en wat niet.

Con: Altijd manueel mergen voegt volgens mij onnodig veel werk toe voor de
programmeur.